/**
 * @author V. H.
 * @file rgl.ts
 * @since 2020
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util = tslib_1.__importStar(require("util"));
const fs = tslib_1.__importStar(require("fs-extra"));
const assert = tslib_1.__importStar(require("assert"));
const path = tslib_1.__importStar(require("path"));
const event = tslib_1.__importStar(require("events"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const string_decoder_1 = require("string_decoder");
const debug = util.debuglog("RGL"), debug_v = util.debuglog("RGLv"), debug_e = util.debuglog("RGLe"), voidfn = () => { };
var rgl;
(function (rgl) {
    debug("RGL loaded.");
    const _mappings_c = require(path.resolve(__dirname, "..", "..", "RGLMappings_c.js")), _mappings_b = require(path.resolve(__dirname, "..", "..", "RGLMappings_b.js")), _mappings_s = require(path.resolve(__dirname, "..", "..", "RGLMappings_s.js"));
    /**
     * Container of Errors.
     */
    let Errors;
    (function (Errors) {
        Errors.ENOBIN = new TypeError("Buffer is not binary.");
        Errors.ENOBUF = new TypeError("Not a Buffer.");
        Errors.EBADBUF = new RangeError("Bad data, Wrong size or format.");
        Errors.EBADTPYE = new TypeError("Bad parameter type.");
        Errors.ENOTTY = new TypeError("Not a TTY.");
    })(Errors = rgl.Errors || (rgl.Errors = {})); //Errors
    /**
     * Responsible for representing Chunks.
     */
    class RGLTile {
        constructor(origin) {
            this.origin = origin;
            this.precalc = "";
            this._id = RGLTile._idcntr++;
            assert.ok(origin.length == 8, Errors.EBADBUF);
            this.origin = Buffer.from(origin);
            this.precalc = (RGLTile.mappings_s.get(origin[6]) || (t => t))((RGLTile.mappings_b.get(origin[5]) || (t => t))((RGLTile.mappings_c.get(origin[4]) || (t => t))(RGLTile.decoder.write(origin.slice(0, 4)).replace(RGLTile.trim, ''))));
            this.reserved = origin[7];
        } //ctor
        get serialize() {
            return Buffer.from(this.origin);
        } //serialize
        static parse(chunk) {
            return new RGLTile(chunk);
        } //parse
        toString() {
            return this.precalc;
        } //toString
        [Symbol.toPrimitive](hint) {
            if (hint === "string")
                return this.toString();
            else
                return this;
        }
    } //RGLTile
    RGLTile.decoder = new string_decoder_1.StringDecoder("utf8");
    RGLTile.trim = /\u0000/gim;
    RGLTile._idcntr = 0;
    /**
     * Responsible for parsing and stripping Chunks.
     */
    class RGLMap {
        constructor(reserved = Buffer.alloc(3, 0), size = Buffer.alloc(2, 0), tiles = [], trailing = Buffer.allocUnsafe(0), _fromFile = "") {
            this.reserved = reserved;
            this.size = size;
            this.tiles = tiles;
            this.trailing = trailing;
            this._fromFile = _fromFile;
            this._id = RGLMap._idcntr++;
            this._fromFile = path.resolve(path.normalize(_fromFile));
        } //ctor
        get serialize() {
            let ret = Buffer.concat([this.reserved, RGLMap.RGL, this.size]);
            for (let tile of this.tiles)
                ret = Buffer.concat([ret, tile.serialize]);
            return Buffer.concat([ret, RGLMap.MAGIC, this.trailing]);
        } //serialize
        /**
         * Store 'T' to writable 'file'.
         *
         * @param file - Target file
         */
        async serializeFile(file = this._fromFile) {
            let data;
            await fs.outputFile(file, data = this.serialize, {
                mode: 0o751,
                encoding: "binary",
                flag: "w"
            });
            return data;
        } //serializeFile
        static parse(data) {
            debug(`RGLMap.parse`);
            assert.ok(Buffer.isBuffer(data), Errors.ENOBUF);
            assert.ok(Buffer.isEncoding("binary"), Errors.ENOBIN);
            assert.ok(data.length >= 9, Errors.EBADBUF);
            const map = new RGLMap(data.slice(0, 3), data.slice(7, 9));
            let idx = 9;
            while (idx < data.length && !data.slice(idx, idx + 5).equals(RGLMap.MAGIC))
                map.tiles.push(RGLTile.parse(data.slice(idx, idx += 8)));
            if (idx != data.length)
                map.trailing = data.slice(idx + 5);
            return map;
        } //parse
        /**
         * Read Buffer from 'file'.
         *
         * @param file - Target file
         */
        static async parseFile(file) {
            debug(`RGLMap.parseFile: ${file}`);
            return new Promise(async (res, rej) => {
                debug_v(`RGLMap.parseFile: ACCESS`);
                fs.access(file, fs.constants.F_OK | fs.constants.R_OK, err => {
                    if (err) {
                        debug_e(`RGLMap.parseFile: ${file} -> EACCESS`);
                        rej(err);
                    }
                    else {
                        debug_v(`RGLMap.parseFile: RSTREAM`);
                        const str = fs.createReadStream(file, {
                            flags: "r",
                            encoding: "binary",
                            mode: fs.constants.S_IRUSR | fs.constants.S_IXGRP,
                            emitClose: true
                        })
                            .once("readable", async () => {
                            debug_v(`RGLMap.parseFile: ${file} -> Readable.`);
                            let data = '';
                            str.setEncoding("binary");
                            for await (let chunk of str)
                                data += chunk;
                            str.once("close", () => {
                                const map = RGLMap.parse(Buffer.from(data, "binary"));
                                map._fromFile = file;
                                res(map);
                            });
                        });
                    }
                });
            });
        } //parseFile
        toString() {
            return this.tiles.map((tile) => tile.toString()).join('');
        } //toString
        [Symbol.toPrimitive](hint) {
            if (hint === "string")
                return this.toString();
            else
                return this;
        }
    } //RGLMap
    RGLMap.MAGIC = Buffer.from([0x03, 0x00, 0x00, 0x00, 0x01]);
    RGLMap.RGL = Buffer.from([0x52, 0x47, 0x4C, 0x02]);
    RGLMap._idcntr = 0;
    /**
     * Responsible for controlling transitions and settings.
     *
     * TODO: Add controls.
     */
    class RGL extends event.EventEmitter {
        constructor(autoconfig = true, mappings_c = _mappings_c, mappings_b = _mappings_b, _Map = RGLMap, _Tile = RGLTile) {
            super();
            this.mappings_c = mappings_c;
            this.mappings_b = mappings_b;
            this._Map = _Map;
            this._Tile = _Tile;
            this.secureSwitch = true;
            this.binds = null;
            if (!chalk_1.default.supportsColor)
                console.warn("Terminal colors are not supported!");
            this.mappings_c = new Map(mappings_c);
            this.mappings_b = new Map(mappings_b);
            if (autoconfig) {
                Promise.all([
                    this.loadMappings_c(),
                    this.loadMappings_b()
                ]).catch(() => debug_e("RGL.autoconf: EMAPPING")).then(() => {
                    this._Tile.mappings_c = this.mappings_c;
                    this._Tile.mappings_b = this.mappings_b;
                    debug("RGL.ctor deffered mappings.");
                });
                this.bind();
            }
            this._Tile.mappings_c = this.mappings_c;
            this._Tile.mappings_b = this.mappings_b;
            this._Tile.mappings_s = RGL.mappings_s;
        } //ctor
        loadMappings_c(map = "RGLMappings_c.js") {
            this.emit("_loadColors", map);
            return RGL.loadMappings(map, this.mappings_c);
        } //loadMappings_c
        loadMappings_b(map = "RGLMappings_b.js") {
            this.emit("_loadBackground", map);
            return RGL.loadMappings(map, this.mappings_b);
        } //loadMappings_c
        /**
         * Include custom mappings.
         *
         * @param map - Load new mappings
         * @param orig - Mappings to override
         */
        static async loadMappings(map, orig) {
            debug("RGL.loadMappings:", util.inspect(orig, { breakLength: Infinity }));
            if (typeof map === "string") {
                delete require.cache[require.resolve(map)];
                const data = require(map);
                for (let sig of data)
                    orig.set(sig[0], sig[1]);
            }
            else if (map instanceof Map) {
                for (let sig of map)
                    orig.set(sig[0], sig[1]);
            }
            else
                throw Errors.EBADTPYE;
            return orig;
        } //loadMappings
        /**
         * Bind the RGL engine to I/O.
         *
         * @param inp - The target user-input stream to bind, must be a TTY
         * @param out - The target user-input stream to bind, must be a TTY
         */
        bind(inp = (this.binds ? this.binds.input : process.stdin) || process.stdin, out = (this.binds ? this.binds.output : process.stdout) || process.stdout) {
            debug("RGL.bind: " + this.binds);
            assert.ok(inp.isTTY && out.isTTY, Errors.ENOTTY);
            if (!!this.binds && !!this.binds.input) {
                debug("RGL.bind unbound.");
                this.binds.input.setRawMode(false);
                if (!!this.binds._inpCb)
                    this.binds.input.removeListener("data", this.binds._inpCb);
            }
            this.binds = {
                input: inp,
                output: out,
                error: process.stderr
            };
            this.binds.input.setRawMode(true);
            this.binds.input.on("data", this.binds._inpCb = data => {
                this.emit("rawkey", data);
                this.emit("key", data.toString());
                if (this.secureSwitch && data.toString() === '\u0003') {
                    this.emit("_exit");
                    process.exit();
                }
            });
            return this;
        } //bind
        /**
         * Start an instance of RGL.
         *
         * @param {any[]} params - Options passed to constructor
         */
        static create(...params) {
            return new RGL(...params);
        } //create
    } //RGL
    RGL.mappings_s = new Map(_mappings_s);
    rgl.RGL = RGL;
})(rgl = exports.rgl || (exports.rgl = {})); //rgl
exports.default = rgl;
//# sourceMappingURL=data:application/json;base64,